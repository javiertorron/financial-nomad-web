// Reglas de seguridad Firestore para Financial Nomad
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función helper para verificar autenticación
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función helper para verificar ownership de usuario
    function isOwner(resource) {
      return isAuthenticated() && 
             resource.data.user_id == request.auth.uid;
    }
    
    // Función helper para verificar si es el propio usuario
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Función helper para validar campos requeridos
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    // Función helper para verificar tipos de datos
    function isValidUserData() {
      return hasRequiredFields(['google_id', 'email', 'name', 'role', 'status']) &&
             request.resource.data.google_id is string &&
             request.resource.data.email is string &&
             request.resource.data.name is string &&
             request.resource.data.role in ['admin', 'user', 'guest'] &&
             request.resource.data.status in ['active', 'inactive', 'suspended', 'pending'];
    }
    
    function isValidAccountData() {
      return hasRequiredFields(['name', 'account_type', 'balance', 'currency', 'user_id']) &&
             request.resource.data.name is string &&
             request.resource.data.account_type in ['checking', 'savings', 'credit_card', 'cash', 'investment', 'loan', 'other'] &&
             request.resource.data.balance is number &&
             request.resource.data.currency is string &&
             request.resource.data.user_id == request.auth.uid;
    }
    
    function isValidTransactionData() {
      return hasRequiredFields(['amount', 'description', 'transaction_type', 'transaction_date', 'account_id', 'category_id', 'user_id']) &&
             request.resource.data.amount is number &&
             request.resource.data.amount != 0 &&
             request.resource.data.description is string &&
             request.resource.data.transaction_type in ['income', 'expense', 'transfer'] &&
             request.resource.data.user_id == request.auth.uid;
    }
    
    function isValidCategoryData() {
      return hasRequiredFields(['name', 'category_type', 'user_id']) &&
             request.resource.data.name is string &&
             request.resource.data.category_type in ['income', 'expense', 'transfer'] &&
             request.resource.data.user_id == request.auth.uid;
    }

    // Reglas para colección de usuarios
    match /users/{userId} {
      allow read: if isUser(userId);
      allow write: if isUser(userId) && isValidUserData();
    }
    
    // Reglas para invitaciones
    match /invitations/{inviteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       hasRequiredFields(['email', 'invited_by', 'invitation_code', 'expires_at']) &&
                       request.resource.data.invited_by == request.auth.uid;
      allow update: if isAuthenticated() && 
                       resource.data.email == request.auth.token.email;
    }
    
    // Reglas para sesiones de usuario
    match /sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
                            resource.data.user_id == request.auth.uid;
    }
    
    // Reglas para cuentas financieras
    match /accounts/{accountId} {
      allow read, write: if isOwner(resource);
      allow create: if isAuthenticated() && isValidAccountData();
    }
    
    // Reglas para categorías
    match /categories/{categoryId} {
      allow read, write: if isOwner(resource);
      allow create: if isAuthenticated() && isValidCategoryData();
    }
    
    // Reglas para transacciones
    match /transactions/{transactionId} {
      allow read, write: if isOwner(resource);
      allow create: if isAuthenticated() && isValidTransactionData();
    }
    
    // Reglas para presupuestos
    match /budgets/{budgetId} {
      allow read, write: if isOwner(resource);
      allow create: if isAuthenticated() && 
                       hasRequiredFields(['name', 'category_id', 'amount', 'period_start', 'period_end', 'user_id']) &&
                       request.resource.data.user_id == request.auth.uid;
    }
    
    // Reglas para transacciones recurrentes
    match /recurring_transactions/{recurringId} {
      allow read, write: if isOwner(resource);
      allow create: if isAuthenticated() && 
                       hasRequiredFields(['name', 'amount', 'transaction_type', 'frequency', 'user_id']) &&
                       request.resource.data.user_id == request.auth.uid;
    }
    
    // Reglas para configuración de integración Asana
    match /asana_integrations/{userId} {
      allow read, write: if isUser(userId);
    }
    
    // Reglas para reportes (solo lectura para el usuario propietario)
    match /reports/{reportId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && 
                       request.resource.data.user_id == request.auth.uid;
    }
    
    // Denegar acceso a cualquier otra colección
    match /{document=**} {
      allow read, write: if false;
    }
  }
}