# Advanced Auto-scaling Configuration for Financial Nomad API
# Optimized for Google Cloud Run with intelligent scaling policies

apiVersion: v1
kind: ConfigMap
metadata:
  name: autoscaling-config
  namespace: production
data:
  # Base auto-scaling configuration
  scaling_config: |
    # Cloud Run Auto-scaling Settings
    cloud_run:
      # Basic scaling parameters
      min_instances: 0          # Scale to zero for cost optimization
      max_instances: 25         # Limit max instances for cost control
      concurrency_per_instance: 80    # Requests per instance
      
      # CPU-based scaling
      cpu_utilization:
        target_percentage: 70   # Target CPU utilization
        scale_up_threshold: 80  # Scale up when CPU > 80%
        scale_down_threshold: 50 # Scale down when CPU < 50%
        
      # Memory-based scaling  
      memory_utilization:
        target_percentage: 75   # Target memory utilization
        scale_up_threshold: 85  # Scale up when memory > 85%
        scale_down_threshold: 60 # Scale down when memory < 60%
        
      # Request-based scaling
      request_metrics:
        target_requests_per_second: 50
        scale_up_requests_threshold: 80
        scale_down_requests_threshold: 20
        
      # Response time based scaling
      response_time:
        target_p95_ms: 500      # Target 95th percentile response time
        scale_up_threshold_ms: 1000  # Scale up if p95 > 1s
        scale_down_threshold_ms: 200 # Scale down if p95 < 200ms
        
      # Error rate based scaling
      error_rate:
        scale_up_error_threshold: 5.0    # Scale up if error rate > 5%
        scale_down_error_threshold: 1.0  # Scale down if error rate < 1%
        
      # Time-based scaling policies
      scheduled_scaling:
        enabled: true
        timezone: "UTC"
        policies:
          # Business hours scaling (9 AM - 6 PM UTC)
          - name: "business_hours"
            schedule: "0 9 * * 1-5"  # 9 AM Monday-Friday
            min_instances: 2
            max_instances: 15
            duration_hours: 9
            
          # Off-hours scaling (6 PM - 9 AM UTC)  
          - name: "off_hours"
            schedule: "0 18 * * 1-5" # 6 PM Monday-Friday
            min_instances: 0
            max_instances: 5
            duration_hours: 15
            
          # Weekend scaling
          - name: "weekend"
            schedule: "0 0 * * 6"    # Saturday midnight
            min_instances: 0
            max_instances: 3
            duration_hours: 48
            
      # Predictive scaling based on historical patterns
      predictive_scaling:
        enabled: true
        look_ahead_minutes: 15   # Predict load 15 minutes ahead
        confidence_threshold: 0.8 # 80% confidence required
        historical_data_days: 30 # Use 30 days of historical data
        
        # Traffic patterns to consider
        patterns:
          - name: "morning_spike"
            time_range: "08:00-10:00"
            expected_increase_percent: 150
            
          - name: "lunch_dip"
            time_range: "12:00-14:00"
            expected_decrease_percent: 30
            
          - name: "end_of_month"
            days: [28, 29, 30, 31]
            expected_increase_percent: 200
            
    # Advanced scaling behaviors
    scaling_behaviors:
      # Scale-up behavior
      scale_up:
        stabilization_window_seconds: 300  # 5 minutes
        select_policy: "max"               # Use policy that scales up most
        
        policies:
          # Aggressive scaling for high load
          - type: "pods"
            value: 4
            period_seconds: 60
            
          # Conservative percentage-based scaling
          - type: "percent"
            value: 50
            period_seconds: 300
            
      # Scale-down behavior  
      scale_down:
        stabilization_window_seconds: 600  # 10 minutes (more conservative)
        select_policy: "min"               # Use policy that scales down least
        
        policies:
          # Gradual scale-down
          - type: "pods"
            value: 2
            period_seconds: 300
            
          # Percentage-based scale-down
          - type: "percent"
            value: 25
            period_seconds: 600

---
# Custom Metrics for Advanced Scaling
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-metrics-config
data:
  metrics_config: |
    # Custom application metrics for scaling decisions
    custom_metrics:
      
      # Business metrics that influence scaling
      business_metrics:
        - name: "active_user_sessions"
          threshold: 100
          scaling_factor: 1.5
          
        - name: "pending_transactions"
          threshold: 500
          scaling_factor: 2.0
          
        - name: "asana_sync_queue_length"
          threshold: 50
          scaling_factor: 1.2
          
      # External service metrics
      external_service_metrics:
        - name: "database_connection_pool"
          max_connections: 100
          scaling_factor: 1.8
          
        - name: "external_api_rate_limits"
          threshold_percent: 80
          scaling_factor: 1.3
          
      # Cache performance metrics
      cache_metrics:
        - name: "cache_hit_rate"
          min_threshold: 0.7    # Scale up if hit rate < 70%
          scaling_factor: 1.4
          
        - name: "cache_memory_usage"
          max_threshold: 0.9    # Scale up if cache memory > 90%
          scaling_factor: 1.6

---
# Intelligent Load Balancing Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-balancer-config
data:
  lb_config: |
    # Intelligent load balancing strategies
    load_balancing:
      
      # Request routing strategies
      routing:
        # Route based on request type
        - pattern: "/api/v1/auth/*"
          strategy: "least_connections"
          sticky_sessions: true
          
        - pattern: "/api/v1/transactions/*" 
          strategy: "weighted_round_robin"
          weights: "cpu_utilization"
          
        - pattern: "/api/v1/reports/*"
          strategy: "resource_based"
          prefer_instances_with: "high_memory"
          
      # Health check configuration
      health_checks:
        primary:
          path: "/api/v1/health"
          interval_seconds: 30
          timeout_seconds: 5
          healthy_threshold: 2
          unhealthy_threshold: 3
          
        advanced:
          path: "/api/v1/health/detailed"
          interval_seconds: 60
          timeout_seconds: 10
          
      # Circuit breaker integration
      circuit_breaker:
        enabled: true
        failure_threshold: 5
        recovery_timeout_seconds: 60
        half_open_max_calls: 3

---
# Monitoring and Alerting for Auto-scaling
apiVersion: v1
kind: ConfigMap
metadata:
  name: autoscaling-monitoring
data:
  monitoring_config: |
    # Auto-scaling monitoring and alerting
    monitoring:
      
      # Scaling event tracking
      scaling_events:
        log_all_events: true
        metrics_retention_days: 90
        
        # Alert conditions
        alerts:
          - name: "frequent_scaling"
            condition: "scaling_events > 10 in 1 hour"
            severity: "warning"
            
          - name: "max_instances_reached"
            condition: "current_instances >= max_instances"
            severity: "critical"
            
          - name: "scaling_failure"
            condition: "scaling_error_rate > 0.1"
            severity: "critical"
            
      # Performance impact monitoring
      performance_tracking:
        # Track scaling effectiveness
        metrics:
          - name: "scaling_response_time"
            description: "Time from trigger to instance ready"
            target_seconds: 90
            
          - name: "scaling_accuracy"
            description: "Percentage of correct scaling decisions"
            target_percent: 85
            
          - name: "resource_efficiency"
            description: "Average resource utilization"
            target_percent: 75
            
      # Cost optimization tracking
      cost_tracking:
        # Monitor costs related to auto-scaling
        track_instance_costs: true
        cost_per_request_target: 0.001  # $0.001 per request
        
        # Idle instance detection
        idle_detection:
          enabled: true
          threshold_minutes: 10
          action: "scale_down_recommendation"
          
    # Advanced scaling algorithms
    algorithms:
      
      # Machine learning based scaling
      ml_scaling:
        enabled: false  # Experimental feature
        model_type: "time_series_forecasting"
        training_data_days: 90
        prediction_horizon_minutes: 30
        
      # Chaos engineering for scaling
      chaos_testing:
        enabled: false  # Only for testing environments
        random_scale_events: true
        failure_injection_rate: 0.01