name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.8'
  NODE_VERSION: '18'

jobs:
  # Backend Tests and Quality Checks
  backend-tests:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      firestore-emulator:
        image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
        ports:
          - 8081:8081
        options: >-
          --health-cmd "gcloud beta emulators firestore start --port=8081 --host-port=0.0.0.0:8081"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Start Firestore Emulator
      run: |
        gcloud components install cloud-firestore-emulator
        gcloud beta emulators firestore start --host-port=localhost:8081 &
        sleep 10
      env:
        CLOUDSDK_CORE_PROJECT: test-project
        
    - name: Code Quality - Black
      run: |
        cd backend
        black --check --diff src/ tests/
        
    - name: Code Quality - Ruff
      run: |
        cd backend
        ruff check src/ tests/
        
    - name: Type Checking - MyPy
      run: |
        cd backend
        mypy src/
      continue-on-error: true  # Allow to continue if type checking has minor issues
      
    - name: Security Scan - Bandit
      run: |
        cd backend
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run Unit Tests
      run: |
        cd backend
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml
      env:
        ENVIRONMENT: testing
        TESTING: 1
        JWT_SECRET_KEY: test-secret-key-for-ci
        FIRESTORE_PROJECT_ID: test-project
        USE_FIRESTORE_EMULATOR: true
        FIRESTORE_EMULATOR_HOST: localhost:8081
        
    - name: Run Integration Tests
      run: |
        cd backend
        python -m pytest tests/integration/ -v
      env:
        ENVIRONMENT: testing
        TESTING: 1
        JWT_SECRET_KEY: test-secret-key-for-ci
        FIRESTORE_PROJECT_ID: test-project
        USE_FIRESTORE_EMULATOR: true
        FIRESTORE_EMULATOR_HOST: localhost:8081
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/test-results.xml
          backend/htmlcov/
          backend/bandit-report.json

  # Frontend Tests and Build (if applicable)
  frontend-tests:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Lint
      run: |
        cd frontend
        npm run lint
        
    - name: Type Check
      run: |
        cd frontend
        npm run type-check
        
    - name: Unit Tests
      run: |
        cd frontend
        npm run test:ci
        
    - name: Build
      run: |
        cd frontend
        npm run build
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Scanning
  dependency-scan:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install safety
      run: pip install safety
      
    - name: Run Safety check
      run: |
        cd backend
        safety check -r requirements.txt --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload Safety Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: backend/safety-report.json

  # Build and Push Docker Images (for deployment)
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install locust
        
    - name: Run Performance Tests
      run: |
        cd backend
        # Start the API server in background
        python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
        # Run basic performance test
        locust --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:8000 -f tests/performance/locustfile.py
      continue-on-error: true

  # Deployment to Staging (if tests pass)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [backend-tests, frontend-tests, security-scan]
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Cloud Run (Staging)
      run: |
        echo "Deploying to staging environment"
        # Add actual deployment commands here
        # gcloud run deploy financial-nomad-api-staging ...
        
  # Deployment to Production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [backend-tests, frontend-tests, security-scan, build-images]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Cloud Run (Production)
      run: |
        echo "Deploying to production environment"
        # Add actual deployment commands here
        # gcloud run deploy financial-nomad-api-prod ...

  # Notify on Success/Failure
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' }}
      run: |
        echo "All tests passed! üéâ"
        # Add Slack notification webhook here if needed
        
    - name: Notify Slack on Failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' }}
      run: |
        echo "Tests failed! ‚ùå"
        # Add Slack notification webhook here if needed